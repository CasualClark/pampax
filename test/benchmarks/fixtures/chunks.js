export const chunkFixtures = [
    {
        id: 'chunk-001',
        sha: 'sha-checkout-service',
        file_path: 'app/Services/Stripe/CreateCheckoutSession.php',
        symbol: 'CreateCheckoutSession::create',
        lang: 'php',
        embedding: [0.2, 0.98, 0.05, 0.02],
        tags: ['stripe', 'checkout'],
        intent: 'create stripe session',
        description: 'Creates a Stripe checkout session for the given cart payload.',
        content: `<?php\nnamespace App\\Services\\Stripe;\n\nclass CreateCheckoutSession\n{\n    public function createCheckoutSession(array $payload): array\n    {\n        $lineItems = $payload['items'];\n        $session = $this->client->checkout->sessions->create([\n            'mode' => 'payment',\n            'line_items' => $lineItems,\n            'success_url' => $payload['successUrl'],\n            'cancel_url' => $payload['cancelUrl'],\n        ]);\n\n        return [\n            'id' => $session->id,\n            'url' => $session->url,\n        ];\n    }\n}`,
        mockScore: 0.82
    },
    {
        id: 'chunk-002',
        sha: 'sha-checkout-controller',
        file_path: 'app/Http/Controllers/CheckoutController.php',
        symbol: 'CheckoutController::create',
        lang: 'php',
        embedding: [0.18, 0.96, 0.04, 0.02],
        tags: ['stripe', 'checkout'],
        intent: 'checkout controller',
        description: 'HTTP controller that wires request data into the Stripe checkout session service.',
        content: `<?php\nnamespace App\\Http\\Controllers;\n\nuse App\\Services\\Stripe\\CreateCheckoutSession;\n\nclass CheckoutController\n{\n    public function create()\n    {\n        $payload = request()->validate([\n            'items' => 'required|array',\n            'successUrl' => 'required|string',\n            'cancelUrl' => 'required|string',\n        ]);\n\n        $session = app(CreateCheckoutSession::class)->createCheckoutSession($payload);\n\n        return response()->json($session);\n    }\n}`,
        mockScore: 0.8
    },
    {
        id: 'chunk-003',
        sha: 'sha-webhook-handler',
        file_path: 'app/Http/Controllers/StripeWebhookController.php',
        symbol: 'StripeWebhookController::handle',
        lang: 'php',
        embedding: [0.16, 0.88, 0.05, 0.12],
        tags: ['stripe'],
        intent: 'stripe webhook',
        description: 'Processes incoming Stripe webhook events to reconcile checkout status.',
        content: `<?php\nnamespace App\\Http\\Controllers;\n\nclass StripeWebhookController\n{\n    public function handle()\n    {\n        $payload = file_get_contents('php://input');\n        $event = json_decode($payload, true);\n\n        if ($event['type'] === 'checkout.session.completed') {\n            // update order state\n        }\n    }\n}`,
        mockScore: 0.6
    },
    {
        id: 'chunk-004',
        sha: 'sha-cart-service',
        file_path: 'app/Services/Cart/RecalculateTotals.ts',
        symbol: 'recalculateCartTotals',
        lang: 'ts',
        embedding: [0.96, 0.12, 0.05, 0.02],
        tags: ['cart', 'totals'],
        intent: 'recalculate cart totals',
        description: 'Synchronizes cart totals against product pricing and discounts.',
        content: `export function recalculateCartTotals(cart, pricing) {\n  const subtotal = cart.items.reduce((sum, item) => sum + item.quantity * pricing[item.sku], 0);\n  const taxes = subtotal * 0.21;\n  return { subtotal, taxes, total: subtotal + taxes };\n}`,
        mockScore: 0.75
    },
    {
        id: 'chunk-005',
        sha: 'sha-cart-hook',
        file_path: 'web/src/hooks/useCartTotals.ts',
        symbol: 'useCartTotals',
        lang: 'ts',
        embedding: [0.92, 0.15, 0.05, 0.02],
        tags: ['cart'],
        intent: 'cart hook',
        description: 'React hook that synchronizes cart totals and exposes formatted totals.',
        content: `export function useCartTotals(cart) {\n  const totals = recalculateCartTotals(cart, window.pricing);\n  return { ...totals, formatted: toCurrency(totals.total) };\n}`,
        mockScore: 0.7
    },
    {
        id: 'chunk-006',
        sha: 'sha-auth-email',
        file_path: 'app/Auth/SendPasswordResetEmail.ts',
        symbol: 'sendPasswordResetEmail',
        lang: 'ts',
        embedding: [0.08, 0.16, 0.96, 0.1],
        tags: ['auth', 'email'],
        intent: 'send password reset',
        description: 'Sends a password reset email with a signed token. mockScore:0.95',
        content: `export async function sendPasswordResetEmail(user, token) {\n  const url = buildResetUrl(token);\n  await mailer.send({\n    to: user.email,\n    subject: 'Reset your password',\n    template: 'auth/reset-password',\n    context: { url },\n  });\n}`,
        mockScore: 0.95
    },
    {
        id: 'chunk-007',
        sha: 'sha-auth-queue',
        file_path: 'app/Auth/QueuePasswordReset.ts',
        symbol: 'queuePasswordReset',
        lang: 'ts',
        embedding: [0.1, 0.14, 0.9, 0.08],
        tags: ['auth'],
        intent: 'queue password reset',
        description: 'Queues a password reset email job for asynchronous delivery.',
        content: `export function queuePasswordReset(user) {\n  return jobQueue.dispatch('send-password-reset', { userId: user.id });\n}`,
        mockScore: 0.55
    },
    {
        id: 'chunk-008',
        sha: 'sha-auth-controller',
        file_path: 'app/Http/Controllers/Auth/PasswordController.ts',
        symbol: 'PasswordController::sendReset',
        lang: 'ts',
        embedding: [0.12, 0.2, 0.92, 0.07],
        tags: ['auth'],
        intent: 'password controller',
        description: 'Validates requests then dispatches password reset emails. mockScore:0.45',
        content: `export async function sendReset(request) {\n  const user = await users.findByEmail(request.email);\n  if (!user) {\n    throw new Error('User not found');\n  }\n  const token = await tokens.create(user.id);\n  await queuePasswordReset(user, token);\n}`,
        mockScore: 0.45
    },
    {
        id: 'chunk-009',
        sha: 'sha-auth-form',
        file_path: 'web/src/components/PasswordResetForm.tsx',
        symbol: 'PasswordResetForm',
        lang: 'tsx',
        embedding: [0.2, 0.18, 0.74, 0.1],
        tags: ['auth', 'ui'],
        intent: 'password reset form',
        description: 'React form for submitting email addresses to request password resets.',
        content: `export function PasswordResetForm() {\n  return (\n    <form>\n      <label htmlFor="email">Email</label>\n      <input id="email" name="email" />\n    </form>\n  );\n}`,
        mockScore: 0.35
    },
    {
        id: 'chunk-010',
        sha: 'sha-invoice-pdf',
        file_path: 'modules/invoice/renderInvoicePdf.ts',
        symbol: 'renderInvoicePdf',
        lang: 'ts',
        embedding: [0.15, 0.25, 0.1, 0.94],
        tags: ['invoice', 'pdf'],
        intent: 'render invoice pdf',
        description: 'Generates an invoice PDF using the billing template. mockScore:0.9',
        content: `export function renderInvoicePdf(invoice) {\n  return pdfRenderer.render('invoice', { invoice });\n}`,
        mockScore: 0.9
    },
    {
        id: 'chunk-011',
        sha: 'sha-invoice-email',
        file_path: 'modules/invoice/emailInvoice.ts',
        symbol: 'emailInvoicePdf',
        lang: 'ts',
        embedding: [0.14, 0.24, 0.12, 0.88],
        tags: ['invoice', 'email'],
        intent: 'email invoice',
        description: 'Emails an invoice PDF to the customer.',
        content: `export async function emailInvoicePdf(invoice, user) {\n  const pdf = renderInvoicePdf(invoice);\n  await mailer.send({\n    to: user.email,\n    attachments: [pdf],\n  });\n}`,
        mockScore: 0.68
    },
    {
        id: 'chunk-012',
        sha: 'sha-invoice-save',
        file_path: 'modules/invoice/saveInvoice.ts',
        symbol: 'saveInvoice',
        lang: 'ts',
        embedding: [0.13, 0.2, 0.08, 0.82],
        tags: ['invoice'],
        intent: 'save invoice',
        description: 'Persists invoice metadata after payment.',
        content: `export function saveInvoice(invoice) {\n  return database.invoices.insert(invoice);\n}`,
        mockScore: 0.55
    },
    {
        id: 'chunk-013',
        sha: 'sha-stripe-tax',
        file_path: 'app/Services/Stripe/CalculateTax.php',
        symbol: 'calculateStripeTax',
        lang: 'php',
        embedding: [0.22, 0.82, 0.04, 0.1],
        tags: ['stripe', 'tax'],
        intent: 'calculate stripe tax',
        description: 'Calculates Stripe tax inclusive totals for items.',
        content: `<?php\nfunction calculateStripeTax(array $items): float\n{\n    $total = 0;\n    foreach ($items as $item) {\n        $total += $item['amount'] * 0.21;\n    }\n    return $total;\n}`,
        mockScore: 0.5
    },
    {
        id: 'chunk-014',
        sha: 'sha-stripe-intent',
        file_path: 'app/Services/Stripe/PaymentIntent.php',
        symbol: 'createPaymentIntent',
        lang: 'php',
        embedding: [0.24, 0.8, 0.06, 0.08],
        tags: ['stripe'],
        intent: 'create payment intent',
        description: 'Creates a Stripe payment intent for manual capture.',
        content: `<?php\nfunction createPaymentIntent(array $payload)\n{\n    return app('stripe')->paymentIntents->create($payload);\n}`,
        mockScore: 0.48
    },
    {
        id: 'chunk-015',
        sha: 'sha-shipping-quote',
        file_path: 'app/Services/Shipping/QuoteService.ts',
        symbol: 'buildShippingQuote',
        lang: 'ts',
        embedding: [0.72, 0.18, 0.12, 0.08],
        tags: ['shipping'],
        intent: 'shipping quote',
        description: 'Calculates shipping quote totals.',
        content: `export function buildShippingQuote(order) {\n  return order.items.length * 6;\n}`,
        mockScore: 0.4
    },
    {
        id: 'chunk-016',
        sha: 'sha-inventory-rebalance',
        file_path: 'app/Services/Inventory/RebalanceStock.ts',
        symbol: 'rebalanceStock',
        lang: 'ts',
        embedding: [0.7, 0.16, 0.14, 0.12],
        tags: ['inventory'],
        intent: 'rebalance stock',
        description: 'Rebalances stock quantities across warehouses.',
        content: `export function rebalanceStock(items) {\n  return items.map(item => ({ ...item, warehouses: item.warehouses.sort() }));\n}`,
        mockScore: 0.38
    },
    {
        id: 'chunk-017',
        sha: 'sha-use-inventory',
        file_path: 'web/src/hooks/useInventory.ts',
        symbol: 'useInventory',
        lang: 'ts',
        embedding: [0.68, 0.14, 0.12, 0.1],
        tags: ['inventory'],
        intent: 'inventory hook',
        description: 'Hook exposing inventory state to components.',
        content: `export function useInventory() {\n  return useQuery('inventory', loadInventory);\n}`,
        mockScore: 0.36
    },
    {
        id: 'chunk-018',
        sha: 'sha-use-portal',
        file_path: 'web/src/hooks/useStripePortal.ts',
        symbol: 'useStripePortal',
        lang: 'ts',
        embedding: [0.3, 0.78, 0.1, 0.12],
        tags: ['stripe'],
        intent: 'customer portal',
        description: 'Hook for linking into the Stripe customer billing portal.',
        content: `export function useStripePortal() {\n  return useMutation(createBillingPortal);\n}`,
        mockScore: 0.52
    },
    {
        id: 'chunk-019',
        sha: 'sha-support-logger',
        file_path: 'app/Support/logger.ts',
        symbol: 'logger',
        lang: 'ts',
        embedding: [0.5, 0.2, 0.18, 0.22],
        tags: ['support'],
        intent: 'logger',
        description: 'Lightweight application logger wrapper.',
        content: `export const logger = { info: console.log, error: console.error };`,
        mockScore: 0.3
    },
    {
        id: 'chunk-020',
        sha: 'sha-notify-welcome',
        file_path: 'app/Services/Notifications/SendWelcomeEmail.ts',
        symbol: 'sendWelcomeEmail',
        lang: 'ts',
        embedding: [0.22, 0.2, 0.84, 0.1],
        tags: ['notifications', 'email'],
        intent: 'welcome email',
        description: 'Sends welcome email after registration.',
        content: `export function sendWelcomeEmail(user) {\n  return mailer.send({ to: user.email, template: 'welcome' });\n}`,
        mockScore: 0.5
    }
];
