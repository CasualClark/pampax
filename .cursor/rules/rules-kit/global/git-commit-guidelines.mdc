---
description: Conventions for Git commit messages
globs: **/*
alwaysApply: true
---
# Git Commit Guidelines

Adopt **Conventional Commits** with emojis for quick context:

| Type     | Emoji | Example                                 |
| -------- | ----- | --------------------------------------- |
| feat     | ‚ú®    | `feat(api): ‚ú® add user authentication` |
| fix      | üêõ    | `fix(payment): üêõ handle timeout error` |
| docs     | üìù    | `docs(readme): üìù clarify setup`        |
| refactor | ‚ôªÔ∏è    | `refactor(core): ‚ôªÔ∏è extract helper`     |
| test     | ‚úÖ    | `test(utils): ‚úÖ edge cases for parser` |
| chore    | üîß    | `chore(ci): üîß bump node version`       |

**Versioning**

-   **MAJOR**: breaking changes (v2.0.0)
-   **MINOR**: new features, backward‚Äëcompatible (v1.1.0)
-   **PATCH**: bug fixes, backward‚Äëcompatible (v1.0.1)

## Author Identity Rules

Para diferenciar claramente el origen de cada commit, **SIEMPRE** usar `--author` seg√∫n el contexto:

### Human Developer Commits
Commits realizados directamente por desarrolladores humanos:
```bash
# Usar identidad normal del desarrollador (sin --author)
git commit -m "feat(auth): ‚ú® implement OAuth login"
```

### AI Assistant Commits  
Commits realizados por asistentes de IA (Claude, ChatGPT, etc.):
```bash
# OBLIGATORIO usar --author con identificaci√≥n AI
git commit --author="Claude AI <claude.ai@assistant.local>" -m "feat(api): ‚ú® add user validation"
git commit --author="ChatGPT AI <chatgpt.ai@assistant.local>" -m "fix(auth): üêõ handle token expiry"
```

### Automated System Commits
Commits autom√°ticos (semantic-release, bots, CI/CD):
```bash
# Estos sistemas ya configuran su propio author autom√°ticamente
# No requiere acci√≥n manual
```

### Important Notes
- **Avatar Display**: El avatar se determina por el email. Emails no asociados a cuentas GitHub mostrar√°n avatar por defecto
- **Consistency**: Mantener consistencia en el formato de emails AI: `<ai-name>.ai@assistant.local`
- **Transparency**: Esta pr√°ctica mejora la transparencia y trazabilidad del desarrollo colaborativo

## Git Identity Configuration

### Per Repository (Recommended)
Configure different name/email for specific projects:

```bash
# Set identity for current repository
git config user.name "Project Name"
git config user.email "project@email.com"

# Verify configuration
git config user.name
git config user.email
```

### Per Commit
Override identity for a single commit:

```bash
git commit --author="Author Name <author@email.com>" -m "commit message"
```

### Global Configuration
Set default identity for all repositories:

```bash
git config --global user.name "Your Name"
git config --global user.email "your@email.com"
```

### Conditional Configuration
Auto-switch identity based on directory (add to `~/.gitconfig`):

```ini
[includeIf "gitdir:~/work/"]
    path = ~/.gitconfig-work

[includeIf "gitdir:~/personal/"]
    path = ~/.gitconfig-personal
```

Create separate config files:
- `~/.gitconfig-work`: Work identity
- `~/.gitconfig-personal`: Personal identity

**Note**: GitHub avatar is determined by the email address associated with your GitHub account.
